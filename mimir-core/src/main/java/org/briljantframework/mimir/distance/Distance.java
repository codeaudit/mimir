/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Isak Karlsson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.briljantframework.mimir.distance;

/**
 * In mathematics, a metric or distance function is a function that defines a distance between
 * elements of a set. A set with a metric is called a metric space. A metric induces a topology on a
 * set but not all topologies can be generated by a metric. A topological space whose topology can
 * be described by a metric is called metrizable. A metric on a set X is a function (called the
 * distance function or simply distance)
 * <p>
 * d : X × X → R
 * <p>
 * (where R is the set of real numbers). For all x, y, z in X, this function is required to satisfy
 * the following conditions:
 * <p>
 * 
 * <pre>
 *        d(x, y) ≥ 0                     (non-negativity, or separation axiom)
 *        d(x, y) = 0                     if and only if   x = y     (identity of indiscernibles, or coincidence axiom)
 *        d(x, y) = d(y, x)               (symmetry)
 *        d(x, z) ≤ d(x, y) + d(y, z)     (subadditivity / triangle inequality).
 * </pre>
 * <p>
 * 
 * For a {@code Distance}-function the triangle inequality is not required to hold. For
 * implementations of {@link MetricDistance} this is required.
 * 
 * @author Isak Karlsson
 */
public interface Distance<T> {

  /**
   * Compute the distance between two points
   *
   * @param a a vector
   * @param b a vector
   * @return the distance
   */
  double compute(T a, T b);
}
